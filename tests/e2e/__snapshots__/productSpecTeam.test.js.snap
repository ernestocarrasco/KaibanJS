// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Product Spec Team Workflows HITL Features Using OpenAI Agents (1) - handles task requiring validation: State after task validation and workflow completion 1`] = `
{
  "agents": [
    {
      "agentInstance": {
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
  ],
  "inputs": {
    "founderIdea": "I want to add a Referral program to our SAAS platform.",
  },
  "logLevel": "error",
  "name": "Product Specs Team",
  "tasks": [
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A functional outline of the Founder Idea",
      "externalValidationRequired": true,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 611,
        "outputTokens": 387,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Lucas",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Technical Writer",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "isDeliverable": true,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 934,
        "outputTokens": 969,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Mia",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Validator",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 1837,
        "outputTokens": 1245,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
  ],
  "teamWorkflowStatus": "FINISHED",
  "workflowContext": "",
  "workflowLogs": [
    {
      "agent": null,
      "logDescription": "Workflow initiated for team *Product Specs Team*.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "inputs": null,
        "message": "Workflow has been initialized with input settings.",
        "startTime": "[REDACTED]",
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Analyze the founder's... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Emma - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Emma starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Emma, please complete the following task: Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.. 
        Your expected output should be: "A functional outline of the Founder Idea". 
        ",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Emma finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": {
        "coreFunctionalities": [
            {
                "functionality": "User Registration and Onboarding",
                "description": "Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."
            },
            {
                "functionality": "Referral Link Generation",
                "description": "Each user should have a unique referral link that they can share with others to track referrals."
            },
            {
                "functionality": "Referral Tracking",
                "description": "The system should be able to track clicks on referral links and sign-ups that result from those links."
            },
            {
                "functionality": "Incentive Management",
                "description": "Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."
            },
            {
                "functionality": "Dashboard for Users",
                "description": "A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."
            },
            {
                "functionality": "Email Notifications",
                "description": "Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."
            },
            {
                "functionality": "Admin Panel for Management",
                "description": "An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."
            },
            {
                "functionality": "Anti-Fraud Measures",
                "description": "Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."
            }
        ],
        "objectives": [
            "Increase user acquisition through organic referrals.",
            "Enhance user engagement by incentivizing sharing.",
            "Track and analyze referral program effectiveness.",
            "Build a community of advocates for the platform."
        ]
    }
}",
          "llmUsageStats": {
            "inputTokens": 611,
            "outputTokens": 387,
          },
          "parsedLLMOutput": {
            "finalAnswer": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Emma got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Emma - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Emma - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task awaiting validation: Analyze the founder's.... Awaiting validation.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0002,
          "totalCost": 0.0003,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 387,
          "parsingErrors": 0,
        },
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "AWAITING_VALIDATION",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow blocked: Task awaiting validation",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0002,
          "totalCost": 0.0003,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "error": "Task awaiting validation",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 387,
          "parsingErrors": 0,
        },
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "BLOCKED",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow running cause a task was validated.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 387,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task validated: Analyze the founder's....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 387,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "VALIDATED",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Analyze the founder's....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0002,
          "totalCost": 0.0003,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 387,
          "parsingErrors": 0,
        },
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 387,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Lucas",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Technical Writer",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Lucas",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Create detailed technical... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Lucas - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Lucas starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Lucas, please complete the following task: Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.. 
        Your expected output should be: "A detailed technical specifications document. Must be in Markdown format.". 
        Incorporate the following findings and insights from previous tasks: "Task: Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.
Result: {"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}
"",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Lucas finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": "# Technical Specifications Document\\n\\n## Overview\\nThis document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.\\n\\n## User Stories\\n1. **User Registration and Onboarding**  \\n   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.\\n\\n2. **Referral Link Generation**  \\n   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.\\n\\n3. **Referral Tracking**  \\n   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.\\n\\n4. **Incentive Management**  \\n   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.\\n\\n5. **Dashboard for Users**  \\n   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.\\n\\n6. **Email Notifications**  \\n   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.\\n\\n7. **Admin Panel for Management**  \\n   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.\\n\\n8. **Anti-Fraud Measures**  \\n   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.\\n\\n## System Requirements\\n### Functional Requirements\\n- **User Registration and Onboarding:**\\n  - Functionality to register users via email or social media accounts.\\n  - An onboarding flow that explains the referral program.\\n\\n- **Referral Link Generation:**\\n  - Generation of unique referral links for each registered user.\\n\\n- **Referral Tracking:**\\n  - Ability to track clicks and sign-ups from referral links.\\n  - Database integration for storing referral data.\\n\\n- **Incentive Management:**\\n  - Interface for administrators to create, modify, and delete incentives.\\n  - Logic for applying incentives based on successful referrals.\\n\\n- **Dashboard for Users:**\\n  - A user-friendly dashboard displaying key performance metrics.\\n  - Visualization tools to track referral trends over time.\\n\\n- **Email Notifications:**\\n  - Automated email system for sending notifications to users about their referral status and rewards.\\n\\n- **Admin Panel for Management:**\\n  - User management features for monitoring referral activities.\\n  - Tools for troubleshooting and resolving issues within the referral program.\\n\\n- **Anti-Fraud Measures:**\\n  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.\\n  - Monitoring and alerting system for unusual referral activity.\\n\\n### Non-Functional Requirements\\n- **Performance:**\\n  - The system should handle up to 10,000 concurrent users without performance degradation.\\n\\n- **Scalability:**\\n  - Design architecture to easily scale with an increasing number of users and referrals.\\n\\n- **Security:**\\n  - Protect user data and ensure that referral links cannot be easily manipulated.\\n\\n## Acceptance Criteria\\n1. Users can successfully register and complete the onboarding process.\\n2. Each user has a unique referral link generated and accessible from their dashboard.\\n3. The system accurately tracks and reports clicks on referral links and successful sign-ups.\\n4. Administrators can create, modify, and delete incentives in the management panel.\\n5. Users have access to a dashboard with accurate performance analytics.\\n6. Users receive timely email notifications regarding their referral status and rewards.\\n7. The admin panel allows for effective monitoring and management of the referral system.\\n8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.\\n\\n## Objectives\\n- Increase user acquisition through organic referrals.\\n- Enhance user engagement by incentivizing sharing.\\n- Track and analyze the referral program’s effectiveness.\\n- Build a community of advocates for the platform."
}",
          "llmUsageStats": {
            "inputTokens": 934,
            "outputTokens": 969,
          },
          "parsedLLMOutput": {
            "finalAnswer": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Lucas got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Lucas - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Lucas - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Create detailed technical....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0006,
          "totalCost": 0.0007,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 934,
          "outputTokens": 969,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Mia",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Validator",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Mia",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Review the technical... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Mia - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Mia starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Mia, please complete the following task: Review the technical specifications to ensure they match the founder's vision and that are technically feasible.. 
        Your expected output should be: "A validated technical specifications document ready for development. Must be in Markdown format.". 
        Incorporate the following findings and insights from previous tasks: "Task: Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.
Result: {"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}

Task: Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.
Result: # Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.
"",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Mia finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": "# Technical Specifications Document\\n\\n## Overview\\nThis document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.\\n\\n## Core Functionalities\\n1. **User Registration and Onboarding**  \\n   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.\\n\\n2. **Referral Link Generation**  \\n   Each user should have a unique referral link that they can share with others to track referrals.\\n\\n3. **Referral Tracking**  \\n   The system should be able to track clicks on referral links and sign-ups that result from those links.\\n\\n4. **Incentive Management**  \\n   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.\\n\\n5. **Dashboard for Users**  \\n   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.\\n\\n6. **Email Notifications**  \\n   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.\\n\\n7. **Admin Panel for Management**  \\n   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.\\n\\n8. **Anti-Fraud Measures**  \\n   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.\\n\\n## User Stories\\n1. **User Registration and Onboarding**  \\n   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.\\n\\n2. **Referral Link Generation**  \\n   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.\\n\\n3. **Referral Tracking**  \\n   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.\\n\\n4. **Incentive Management**  \\n   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.\\n\\n5. **Dashboard for Users**  \\n   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.\\n\\n6. **Email Notifications**  \\n   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.\\n\\n7. **Admin Panel for Management**  \\n   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.\\n\\n8. **Anti-Fraud Measures**  \\n   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.\\n\\n## System Requirements\\n### Functional Requirements\\n- **User Registration and Onboarding:**\\n  - Functionality to register users via email or social media accounts.\\n  - An onboarding flow that explains the referral program.\\n\\n- **Referral Link Generation:**\\n  - Generation of unique referral links for each registered user.\\n\\n- **Referral Tracking:**\\n  - Ability to track clicks and sign-ups from referral links.\\n  - Database integration for storing referral data.\\n\\n- **Incentive Management:**\\n  - Interface for administrators to create, modify, and delete incentives.\\n  - Logic for applying incentives based on successful referrals.\\n\\n- **Dashboard for Users:**\\n  - A user-friendly dashboard displaying key performance metrics.\\n  - Visualization tools to track referral trends over time.\\n\\n- **Email Notifications:**\\n  - Automated email system for sending notifications to users about their referral status and rewards.\\n\\n- **Admin Panel for Management:**\\n  - User management features for monitoring referral activities.\\n  - Tools for troubleshooting and resolving issues within the referral program.\\n\\n- **Anti-Fraud Measures:**\\n  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.\\n  - Monitoring and alerting system for unusual referral activity.\\n\\n### Non-Functional Requirements\\n- **Performance:**\\n  - The system should handle up to 10,000 concurrent users without performance degradation.\\n\\n- **Scalability:**\\n  - Design architecture to easily scale with an increasing number of users and referrals.\\n\\n- **Security:**\\n  - Protect user data and ensure that referral links cannot be easily manipulated.\\n\\n## Acceptance Criteria\\n1. Users can successfully register and complete the onboarding process.\\n2. Each user has a unique referral link generated and accessible from their dashboard.\\n3. The system accurately tracks and reports clicks on referral links and successful sign-ups.\\n4. Administrators can create, modify, and delete incentives in the management panel.\\n5. Users have access to a dashboard with accurate performance analytics.\\n6. Users receive timely email notifications regarding their referral status and rewards.\\n7. The admin panel allows for effective monitoring and management of the referral system.\\n8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.\\n\\n## Objectives\\n- Increase user acquisition through organic referrals.\\n- Enhance user engagement by incentivizing sharing.\\n- Track and analyze the referral program’s effectiveness.\\n- Build a community of advocates for the platform."
}",
          "llmUsageStats": {
            "inputTokens": 1837,
            "outputTokens": 1245,
          },
          "parsedLLMOutput": {
            "finalAnswer": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Mia got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Mia - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Mia - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Review the technical....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0003,
          "costOutputTokens": 0.0007,
          "totalCost": 0.001,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 1837,
          "outputTokens": 1245,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's vision. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## Core Functionalities
1. **User Registration and Onboarding**  
   Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program.

2. **Referral Link Generation**  
   Each user should have a unique referral link that they can share with others to track referrals.

3. **Referral Tracking**  
   The system should be able to track clicks on referral links and sign-ups that result from those links.

4. **Incentive Management**  
   Define and manage incentives for referrers and referees, such as discounts, credits, or rewards.

5. **Dashboard for Users**  
   A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics.

6. **Email Notifications**  
   Automated email notifications to inform users about their referral status, rewards, or any updates related to the program.

7. **Admin Panel for Management**  
   An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues.

8. **Anti-Fraud Measures**  
   Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": null,
      "logDescription": "Workflow finished with result: # Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0004,
          "costOutputTokens": 0.0013,
          "totalCost": 0.0017,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 2,
        "llmUsageStats": {
          "callsCount": 2,
          "callsErrorCount": 0,
          "inputTokens": 2771,
          "outputTokens": 2214,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "FINISHED",
    },
  ],
  "workflowResult": "# Technical Specifications Document

## Overview
This document outlines the detailed technical specifications for implementing a referral program based on the founder's idea. The aim is to create a robust and user-friendly system that facilitates user registration, referral tracking, and incentive management.

## User Stories
1. **User Registration and Onboarding**  
   As a new user, I want to easily register on the platform and go through an onboarding process that introduces me to the referral program so that I can start referring others.

2. **Referral Link Generation**  
   As a registered user, I want to have a unique referral link generated for me so that I can share it with others and track my referrals.

3. **Referral Tracking**  
   As a user, I want the system to track the clicks on my referral link and sign-ups that result from those clicks so that I can see how effective my referrals are.

4. **Incentive Management**  
   As an administrator, I want to define and manage different incentives for referrers and referees, such as discounts and rewards, so that I can motivate users to participate in the referral program.

5. **Dashboard for Users**  
   As a user, I want to access a dedicated dashboard where I can view my referral statistics, rewards earned, and performance analytics so that I can monitor my engagement with the referral program.

6. **Email Notifications**  
   As a user, I want to receive automated email notifications about my referral status and updates regarding rewards so that I stay informed on my performance.

7. **Admin Panel for Management**  
   As an administrator, I want an interface to monitor the performance of the referral program, manage rewards, and troubleshoot any issues, so that I can ensure the program runs smoothly.

8. **Anti-Fraud Measures**  
   As a system administrator, I want to implement mechanisms to prevent fraudulent activities related to referrals so that we can maintain the integrity of the referral program.

## System Requirements
### Functional Requirements
- **User Registration and Onboarding:**
  - Functionality to register users via email or social media accounts.
  - An onboarding flow that explains the referral program.

- **Referral Link Generation:**
  - Generation of unique referral links for each registered user.

- **Referral Tracking:**
  - Ability to track clicks and sign-ups from referral links.
  - Database integration for storing referral data.

- **Incentive Management:**
  - Interface for administrators to create, modify, and delete incentives.
  - Logic for applying incentives based on successful referrals.

- **Dashboard for Users:**
  - A user-friendly dashboard displaying key performance metrics.
  - Visualization tools to track referral trends over time.

- **Email Notifications:**
  - Automated email system for sending notifications to users about their referral status and rewards.

- **Admin Panel for Management:**
  - User management features for monitoring referral activities.
  - Tools for troubleshooting and resolving issues within the referral program.

- **Anti-Fraud Measures:**
  - Implementation of CAPTCHA or other verification methods to prevent automated submissions.
  - Monitoring and alerting system for unusual referral activity.

### Non-Functional Requirements
- **Performance:**
  - The system should handle up to 10,000 concurrent users without performance degradation.

- **Scalability:**
  - Design architecture to easily scale with an increasing number of users and referrals.

- **Security:**
  - Protect user data and ensure that referral links cannot be easily manipulated.

## Acceptance Criteria
1. Users can successfully register and complete the onboarding process.
2. Each user has a unique referral link generated and accessible from their dashboard.
3. The system accurately tracks and reports clicks on referral links and successful sign-ups.
4. Administrators can create, modify, and delete incentives in the management panel.
5. Users have access to a dashboard with accurate performance analytics.
6. Users receive timely email notifications regarding their referral status and rewards.
7. The admin panel allows for effective monitoring and management of the referral system.
8. The system implements effective anti-fraud measures that reduce fraudulent activities by at least 90%.

## Objectives
- Increase user acquisition through organic referrals.
- Enhance user engagement by incentivizing sharing.
- Track and analyze the referral program’s effectiveness.
- Build a community of advocates for the platform.",
}
`;

exports[`Product Spec Team Workflows HITL Features Using OpenAI Agents (1) - handles task requiring validation: State when workflow is blocked waiting for validation 1`] = `
{
  "agents": [
    {
      "agentInstance": {
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": null,
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "INITIAL",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": null,
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "INITIAL",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
  ],
  "inputs": {
    "founderIdea": "I want to add a Referral program to our SAAS platform.",
  },
  "logLevel": "error",
  "name": "Product Specs Team",
  "tasks": [
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A functional outline of the Founder Idea",
      "externalValidationRequired": true,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 611,
        "outputTokens": 387,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "AWAITING_VALIDATION",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": null,
          "maxIterations": 10,
          "name": "Lucas",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Technical Writer",
          "status": "INITIAL",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "interpolatedTaskDescription": null,
      "isDeliverable": true,
      "outputSchema": null,
      "result": null,
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "TODO",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": null,
          "maxIterations": 10,
          "name": "Mia",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Validator",
          "status": "INITIAL",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "interpolatedTaskDescription": null,
      "isDeliverable": false,
      "outputSchema": null,
      "result": null,
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "TODO",
      "store": [Function],
      "title": "",
    },
  ],
  "teamWorkflowStatus": "BLOCKED",
  "workflowContext": "",
  "workflowLogs": [
    {
      "agent": null,
      "logDescription": "Workflow initiated for team *Product Specs Team*.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "inputs": null,
        "message": "Workflow has been initialized with input settings.",
        "startTime": "[REDACTED]",
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Analyze the founder's... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Emma - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Emma starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Emma, please complete the following task: Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.. 
        Your expected output should be: "A functional outline of the Founder Idea". 
        ",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Emma finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": {
        "coreFunctionalities": [
            {
                "functionality": "User Registration and Onboarding",
                "description": "Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."
            },
            {
                "functionality": "Referral Link Generation",
                "description": "Each user should have a unique referral link that they can share with others to track referrals."
            },
            {
                "functionality": "Referral Tracking",
                "description": "The system should be able to track clicks on referral links and sign-ups that result from those links."
            },
            {
                "functionality": "Incentive Management",
                "description": "Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."
            },
            {
                "functionality": "Dashboard for Users",
                "description": "A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."
            },
            {
                "functionality": "Email Notifications",
                "description": "Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."
            },
            {
                "functionality": "Admin Panel for Management",
                "description": "An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."
            },
            {
                "functionality": "Anti-Fraud Measures",
                "description": "Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."
            }
        ],
        "objectives": [
            "Increase user acquisition through organic referrals.",
            "Enhance user engagement by incentivizing sharing.",
            "Track and analyze referral program effectiveness.",
            "Build a community of advocates for the platform."
        ]
    }
}",
          "llmUsageStats": {
            "inputTokens": 611,
            "outputTokens": 387,
          },
          "parsedLLMOutput": {
            "finalAnswer": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Emma got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Emma - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Emma - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task awaiting validation: Analyze the founder's.... Awaiting validation.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0002,
          "totalCost": 0.0003,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 387,
          "parsingErrors": 0,
        },
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "AWAITING_VALIDATION",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow blocked: Task awaiting validation",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0002,
          "totalCost": 0.0003,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "error": "Task awaiting validation",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 387,
          "parsingErrors": 0,
        },
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Onboarding","description":"Users should be able to easily register on the platform and get an onboarding process that introduces them to the referral program."},{"functionality":"Referral Link Generation","description":"Each user should have a unique referral link that they can share with others to track referrals."},{"functionality":"Referral Tracking","description":"The system should be able to track clicks on referral links and sign-ups that result from those links."},{"functionality":"Incentive Management","description":"Define and manage incentives for referrers and referees, such as discounts, credits, or rewards."},{"functionality":"Dashboard for Users","description":"A dedicated user dashboard to view referral statistics, such as the number of referrals made, rewards earned, and performance analytics."},{"functionality":"Email Notifications","description":"Automated email notifications to inform users about their referral status, rewards, or any updates related to the program."},{"functionality":"Admin Panel for Management","description":"An administrative interface to monitor the overall performance of the referral program, manage rewards and troubleshoot any issues."},{"functionality":"Anti-Fraud Measures","description":"Implement mechanisms to prevent fraudulent activities and ensure that referral practices comply with terms of service."}],"objectives":["Increase user acquisition through organic referrals.","Enhance user engagement by incentivizing sharing.","Track and analyze referral program effectiveness.","Build a community of advocates for the platform."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "BLOCKED",
    },
  ],
  "workflowResult": null,
}
`;

exports[`Product Spec Team Workflows HITL Features Using OpenAI Agents (2) - processes feedback and completes workflow: State after feedback, validation, and workflow completion 1`] = `
{
  "agents": [
    {
      "agentInstance": {
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
  ],
  "inputs": {
    "founderIdea": "I want to add a Referral program to our SAAS platform.",
  },
  "logLevel": "error",
  "name": "Product Specs Team",
  "tasks": [
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A functional outline of the Founder Idea",
      "externalValidationRequired": true,
      "feedbackHistory": [
        {
          "content": "Sorry the founder idea is to spent 10k in Google Ads every",
          "status": "PROCESSED",
          "timestamp": "[REDACTED]",
        },
      ],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 825,
        "outputTokens": 198,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Lucas",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Technical Writer",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "isDeliverable": true,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 833,
        "outputTokens": 921,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Mia",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Validator",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 1690,
        "outputTokens": 921,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
  ],
  "teamWorkflowStatus": "FINISHED",
  "workflowContext": "",
  "workflowLogs": [
    {
      "agent": null,
      "logDescription": "Workflow initiated for team *Product Specs Team*.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "inputs": null,
        "message": "Workflow has been initialized with input settings.",
        "startTime": "[REDACTED]",
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Analyze the founder's... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Emma - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Emma starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Emma, please complete the following task: Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.. 
        Your expected output should be: "A functional outline of the Founder Idea". 
        ",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Emma finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools."
}",
          "llmUsageStats": {
            "inputTokens": 611,
            "outputTokens": 183,
          },
          "parsedLLMOutput": {
            "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Emma got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Emma - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Emma - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task awaiting validation: Analyze the founder's.... Awaiting validation.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "AWAITING_VALIDATION",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow blocked: Task awaiting validation",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "error": "Task awaiting validation",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "BLOCKED",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow running again due to feedback on task.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {
          "content": "Sorry the founder idea is to spent 10k in Google Ads every",
          "status": "PENDING",
          "timestamp": "[REDACTED]",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task with feedback: Analyze the founder's....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {
          "content": "Sorry the founder idea is to spent 10k in Google Ads every",
          "status": "PENDING",
          "timestamp": "[REDACTED]",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "REVISE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "REVISE",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task: Analyze the founder's... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Emma - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Emma starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Emma, please complete the following task: Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.. 
        Your expected output should be: "A functional outline of the Founder Idea". 
        ",
            "type": "HumanMessage",
          },
          {
            "content": "{
    "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools."
}",
            "type": "AIMessage",
          },
          {
            "content": "Here is some feedback for you to address: Sorry the founder idea is to spent 10k in Google Ads every",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Emma finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management."
}",
          "llmUsageStats": {
            "inputTokens": 825,
            "outputTokens": 198,
          },
          "parsedLLMOutput": {
            "finalAnswer": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Emma got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Emma - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Emma - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task awaiting validation: Analyze the founder's.... Awaiting validation.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 825,
          "outputTokens": 198,
          "parsingErrors": 0,
        },
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "AWAITING_VALIDATION",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow blocked: Task awaiting validation",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "error": "Task awaiting validation",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 825,
          "outputTokens": 198,
          "parsingErrors": 0,
        },
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "BLOCKED",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow running cause a task was validated.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PROCESSED",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 825,
          "outputTokens": 198,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task validated: Analyze the founder's....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PROCESSED",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 825,
          "outputTokens": 198,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "VALIDATED",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Analyze the founder's....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 825,
          "outputTokens": 198,
          "parsingErrors": 0,
        },
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PROCESSED",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 825,
          "outputTokens": 198,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Lucas",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Technical Writer",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Lucas",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Create detailed technical... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Lucas - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Lucas starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Lucas, please complete the following task: Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.. 
        Your expected output should be: "A detailed technical specifications document. Must be in Markdown format.". 
        Incorporate the following findings and insights from previous tasks: "Task: Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.
Result: The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.
"",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Lucas finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": "# Technical Specifications Document\\n\\n## Project Overview\\nThis document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.\\n\\n## User Stories\\n1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.\\n2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.\\n3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.\\n4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.\\n5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.\\n\\n## System Requirements\\n### Functional Requirements\\n1. **Budget Management**\\n   - The system must allow users to allocate the $10,000 budget for various campaigns.\\n   - Features to track spending against the budget in real-time.\\n\\n2. **Campaign Setup**\\n   - User-friendly interface for creating ad campaigns.\\n   - Users must be able to select keywords, ad types, and target demographics.\\n\\n3. **Performance Tracking**\\n   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.\\n   - Real-time performance updates displayed on the dashboard.\\n\\n4. **A/B Testing**\\n   - Functionality to create variant ads for testing.\\n   - Capability to analyze the performance of each variant and provide recommendations.\\n\\n5. **Reporting Dashboard**\\n   - A centralized dashboard to view campaign metrics and performance insights.\\n   - Options to generate reports based on various performance parameters.\\n\\n6. **Automated Adjustments**\\n   - Algorithms to adjust bids and ad placements based on performance data.\\n   - Users receive notifications on adjustments made by the system.\\n\\n7. **Integration with Google Ads API**\\n   - Ensure compatibility and secure data exchange with the Google Ads API.\\n   - Documentation for setup and troubleshooting of the integration.\\n\\n### Non-Functional Requirements\\n- The system must handle multiple user roles with appropriate access controls.\\n- The response time for the dashboard updates should be less than 3 seconds.\\n- The system should be scalable to accommodate increased budget or additional campaigns in the future.\\n- Data security standards must be followed to protect sensitive financial and performance data.\\n\\n## Acceptance Criteria\\n1. **Budget Management**\\n   - Users can successfully allocate and adjust the budget within the system.\\n   - The system should prevent overspending beyond the $10,000 limit.\\n\\n2. **Campaign Setup**\\n   - Users can create and manage campaigns with no technical support required.\\n   - All selected keywords, ad types, and demographics are correctly saved and displayed.\\n\\n3. **Performance Tracking**\\n   - The dashboard displays accurate real-time data of performance metrics.\\n   - Users can generate reports with at least three different customizable parameters.\\n\\n4. **A/B Testing**\\n   - Users can set up multiple ad variants for testing.\\n   - The system provides conclusive results comparing ad performances within 24 hours of running the test.\\n\\n5. **Reporting Dashboard**\\n   - Users can access the reporting dashboard with data updated in real-time.\\n   - The dashboard maintains user-friendly access and navigation.\\n\\n6. **Automated Adjustments**\\n   - Users receive alerts for any automated adjustments made to bids and placements.\\n   - Adjustments reflect accurately in the budget management interface.\\n\\n7. **Integration with Google Ads API**\\n   - The system successfully connects to the Google Ads API without errors.\\n   - Users can view data from Google Ads reflected in our system seamlessly.\\n\\n## Conclusion\\nThis technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns."
}",
          "llmUsageStats": {
            "inputTokens": 833,
            "outputTokens": 921,
          },
          "parsedLLMOutput": {
            "finalAnswer": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Lucas got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Lucas - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Lucas - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Create detailed technical....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0006,
          "totalCost": 0.0007,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 833,
          "outputTokens": 921,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Mia",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Validator",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Mia",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Review the technical... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Mia - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Mia starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Mia, please complete the following task: Review the technical specifications to ensure they match the founder's vision and that are technically feasible.. 
        Your expected output should be: "A validated technical specifications document ready for development. Must be in Markdown format.". 
        Incorporate the following findings and insights from previous tasks: "Task: Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.
Result: The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.

Task: Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.
Result: # Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.
"",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Mia finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": "# Technical Specifications Document\\n\\n## Project Overview\\nThis document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.\\n\\n## User Stories\\n1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.\\n2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.\\n3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.\\n4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.\\n5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.\\n\\n## System Requirements\\n### Functional Requirements\\n1. **Budget Management**\\n   - The system must allow users to allocate the $10,000 budget for various campaigns.\\n   - Features to track spending against the budget in real-time.\\n\\n2. **Campaign Setup**\\n   - User-friendly interface for creating ad campaigns.\\n   - Users must be able to select keywords, ad types, and target demographics.\\n\\n3. **Performance Tracking**\\n   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.\\n   - Real-time performance updates displayed on the dashboard.\\n\\n4. **A/B Testing**\\n   - Functionality to create variant ads for testing.\\n   - Capability to analyze the performance of each variant and provide recommendations.\\n\\n5. **Reporting Dashboard**\\n   - A centralized dashboard to view campaign metrics and performance insights.\\n   - Options to generate reports based on various performance parameters.\\n\\n6. **Automated Adjustments**\\n   - Algorithms to adjust bids and ad placements based on performance data.\\n   - Users receive notifications on adjustments made by the system.\\n\\n7. **Integration with Google Ads API**\\n   - Ensure compatibility and secure data exchange with the Google Ads API.\\n   - Documentation for setup and troubleshooting of the integration.\\n\\n### Non-Functional Requirements\\n- The system must handle multiple user roles with appropriate access controls.\\n- The response time for the dashboard updates should be less than 3 seconds.\\n- The system should be scalable to accommodate increased budget or additional campaigns in the future.\\n- Data security standards must be followed to protect sensitive financial and performance data.\\n\\n## Acceptance Criteria\\n1. **Budget Management**\\n   - Users can successfully allocate and adjust the budget within the system.\\n   - The system should prevent overspending beyond the $10,000 limit.\\n\\n2. **Campaign Setup**\\n   - Users can create and manage campaigns with no technical support required.\\n   - All selected keywords, ad types, and demographics are correctly saved and displayed.\\n\\n3. **Performance Tracking**\\n   - The dashboard displays accurate real-time data of performance metrics.\\n   - Users can generate reports with at least three different customizable parameters.\\n\\n4. **A/B Testing**\\n   - Users can set up multiple ad variants for testing.\\n   - The system provides conclusive results comparing ad performances within 24 hours of running the test.\\n\\n5. **Reporting Dashboard**\\n   - Users can access the reporting dashboard with data updated in real-time.\\n   - The dashboard maintains user-friendly access and navigation.\\n\\n6. **Automated Adjustments**\\n   - Users receive alerts for any automated adjustments made to bids and placements.\\n   - Adjustments reflect accurately in the budget management interface.\\n\\n7. **Integration with Google Ads API**\\n   - The system successfully connects to the Google Ads API without errors.\\n   - Users can view data from Google Ads reflected in our system seamlessly.\\n\\n## Conclusion\\nThis technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns."
}",
          "llmUsageStats": {
            "inputTokens": 1690,
            "outputTokens": 921,
          },
          "parsedLLMOutput": {
            "finalAnswer": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Mia got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Mia - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Mia - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Review the technical....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0003,
          "costOutputTokens": 0.0006,
          "totalCost": 0.0008,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 1690,
          "outputTokens": 921,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": null,
      "logDescription": "Workflow finished with result: # Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0004,
          "costOutputTokens": 0.0011,
          "totalCost": 0.0015,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 2,
        "llmUsageStats": {
          "callsCount": 2,
          "callsErrorCount": 0,
          "inputTokens": 2523,
          "outputTokens": 1842,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "FINISHED",
    },
  ],
  "workflowResult": "# Technical Specifications Document

## Project Overview
This document outlines the technical specifications for implementing a budget management system for Google Ads. The system is designed to allocate and manage a monthly budget of $10,000 effectively, while providing tools for campaign management, performance tracking, and optimization.

## User Stories
1. **As a marketing manager**, I want to set up and manage ad campaigns easily, so that I can promote our products effectively.
2. **As a finance officer**, I want to monitor the budget allocation and spending, so that I can ensure we stay within the $10,000 monthly limit.
3. **As a data analyst**, I want to view real-time analytics of our ad performance, so that I can provide insights for future campaigns.
4. **As a campaign manager**, I want to perform A/B testing on different ad variants, so that I can identify the most effective content.
5. **As a technical lead**, I want to ensure that our system integrates seamlessly with the Google Ads API, so that we can automate data synchronization.

## System Requirements
### Functional Requirements
1. **Budget Management**
   - The system must allow users to allocate the $10,000 budget for various campaigns.
   - Features to track spending against the budget in real-time.

2. **Campaign Setup**
   - User-friendly interface for creating ad campaigns.
   - Users must be able to select keywords, ad types, and target demographics.

3. **Performance Tracking**
   - Integration of monitoring tools for impressions, clicks, conversions, and ROI.
   - Real-time performance updates displayed on the dashboard.

4. **A/B Testing**
   - Functionality to create variant ads for testing.
   - Capability to analyze the performance of each variant and provide recommendations.

5. **Reporting Dashboard**
   - A centralized dashboard to view campaign metrics and performance insights.
   - Options to generate reports based on various performance parameters.

6. **Automated Adjustments**
   - Algorithms to adjust bids and ad placements based on performance data.
   - Users receive notifications on adjustments made by the system.

7. **Integration with Google Ads API**
   - Ensure compatibility and secure data exchange with the Google Ads API.
   - Documentation for setup and troubleshooting of the integration.

### Non-Functional Requirements
- The system must handle multiple user roles with appropriate access controls.
- The response time for the dashboard updates should be less than 3 seconds.
- The system should be scalable to accommodate increased budget or additional campaigns in the future.
- Data security standards must be followed to protect sensitive financial and performance data.

## Acceptance Criteria
1. **Budget Management**
   - Users can successfully allocate and adjust the budget within the system.
   - The system should prevent overspending beyond the $10,000 limit.

2. **Campaign Setup**
   - Users can create and manage campaigns with no technical support required.
   - All selected keywords, ad types, and demographics are correctly saved and displayed.

3. **Performance Tracking**
   - The dashboard displays accurate real-time data of performance metrics.
   - Users can generate reports with at least three different customizable parameters.

4. **A/B Testing**
   - Users can set up multiple ad variants for testing.
   - The system provides conclusive results comparing ad performances within 24 hours of running the test.

5. **Reporting Dashboard**
   - Users can access the reporting dashboard with data updated in real-time.
   - The dashboard maintains user-friendly access and navigation.

6. **Automated Adjustments**
   - Users receive alerts for any automated adjustments made to bids and placements.
   - Adjustments reflect accurately in the budget management interface.

7. **Integration with Google Ads API**
   - The system successfully connects to the Google Ads API without errors.
   - Users can view data from Google Ads reflected in our system seamlessly.

## Conclusion
This technical specifications document provides a comprehensive outline to guide the development of a budget management system for Google Ads. By fulfilling the outlined user stories, system requirements, and acceptance criteria, the system will meet the needs of marketing professionals while optimizing their ad campaigns.",
}
`;

exports[`Product Spec Team Workflows HITL Features Using OpenAI Agents (2) - processes feedback and completes workflow: State when workflow is blocked after feedback, waiting for validation 1`] = `
{
  "agents": [
    {
      "agentInstance": {
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": null,
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "INITIAL",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": null,
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "INITIAL",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
  ],
  "inputs": {
    "founderIdea": "I want to add a Referral program to our SAAS platform.",
  },
  "logLevel": "error",
  "name": "Product Specs Team",
  "tasks": [
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A functional outline of the Founder Idea",
      "externalValidationRequired": true,
      "feedbackHistory": [
        {
          "content": "Sorry the founder idea is to spent 10k in Google Ads every",
          "status": "PROCESSED",
          "timestamp": "[REDACTED]",
        },
      ],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 825,
        "outputTokens": 198,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "AWAITING_VALIDATION",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": null,
          "maxIterations": 10,
          "name": "Lucas",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Technical Writer",
          "status": "INITIAL",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "interpolatedTaskDescription": null,
      "isDeliverable": true,
      "outputSchema": null,
      "result": null,
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "TODO",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": null,
          "maxIterations": 10,
          "name": "Mia",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Validator",
          "status": "INITIAL",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "interpolatedTaskDescription": null,
      "isDeliverable": false,
      "outputSchema": null,
      "result": null,
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "TODO",
      "store": [Function],
      "title": "",
    },
  ],
  "teamWorkflowStatus": "BLOCKED",
  "workflowContext": "",
  "workflowLogs": [
    {
      "agent": null,
      "logDescription": "Workflow initiated for team *Product Specs Team*.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "inputs": null,
        "message": "Workflow has been initialized with input settings.",
        "startTime": "[REDACTED]",
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Analyze the founder's... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Emma - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Emma starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Emma, please complete the following task: Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.. 
        Your expected output should be: "A functional outline of the Founder Idea". 
        ",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Emma finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools."
}",
          "llmUsageStats": {
            "inputTokens": 611,
            "outputTokens": 183,
          },
          "parsedLLMOutput": {
            "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Emma got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Emma - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Emma - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task awaiting validation: Analyze the founder's.... Awaiting validation.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "AWAITING_VALIDATION",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow blocked: Task awaiting validation",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "error": "Task awaiting validation",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "BLOCKED",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow running again due to feedback on task.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {
          "content": "Sorry the founder idea is to spent 10k in Google Ads every",
          "status": "PENDING",
          "timestamp": "[REDACTED]",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task with feedback: Analyze the founder's....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {
          "content": "Sorry the founder idea is to spent 10k in Google Ads every",
          "status": "PENDING",
          "timestamp": "[REDACTED]",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "REVISE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "REVISE",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task: Analyze the founder's... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Emma - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Emma starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Emma, please complete the following task: Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.. 
        Your expected output should be: "A functional outline of the Founder Idea". 
        ",
            "type": "HumanMessage",
          },
          {
            "content": "{
    "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools."
}",
            "type": "AIMessage",
          },
          {
            "content": "Here is some feedback for you to address: Sorry the founder idea is to spent 10k in Google Ads every",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Emma finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management."
}",
          "llmUsageStats": {
            "inputTokens": 825,
            "outputTokens": 198,
          },
          "parsedLLMOutput": {
            "finalAnswer": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Emma got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Emma - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Emma - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task awaiting validation: Analyze the founder's.... Awaiting validation.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 825,
          "outputTokens": 198,
          "parsingErrors": 0,
        },
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "AWAITING_VALIDATION",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow blocked: Task awaiting validation",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "error": "Task awaiting validation",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 825,
          "outputTokens": 198,
          "parsingErrors": 0,
        },
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [
          {
            "content": "Sorry the founder idea is to spent 10k in Google Ads every",
            "status": "PENDING",
            "timestamp": "[REDACTED]",
          },
        ],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "outputSchema": null,
        "result": "The revised functional outline based on the founder's idea to spend $10,000 on Google Ads monthly includes: 1. Budget Management: Implement a system to allocate and manage the $10k budget for Google Ads effectively. 2. Campaign Setup: Develop a user-friendly interface for creating and managing ad campaigns, including selecting keywords, ad types, and target demographics. 3. Performance Tracking: Integrate tools to monitor ad performance, including impressions, clicks, conversions, and return on investment (ROI). 4. A/B Testing: Enable A/B testing functionalities to optimize ad content and targeting strategies for improved performance. 5. Reporting Dashboard: Create a reporting dashboard that provides real-time analytics and insights on campaign effectiveness. 6. Automated Adjustments: Implement algorithms that automatically adjust bids and ad placements based on performance metrics. 7. Integration with Google Ads API: Ensure compatibility with the Google Ads API for seamless data exchange and management.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "BLOCKED",
    },
  ],
  "workflowResult": null,
}
`;

exports[`Product Spec Team Workflows HITL Features Using OpenAI Agents (2) - processes feedback and completes workflow: State when workflow is blocked waiting for initial feedback 1`] = `
{
  "agents": [
    {
      "agentInstance": {
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": null,
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "INITIAL",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": null,
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "INITIAL",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
  ],
  "inputs": {
    "founderIdea": "I want to add a Referral program to our SAAS platform.",
  },
  "logLevel": "error",
  "name": "Product Specs Team",
  "tasks": [
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A functional outline of the Founder Idea",
      "externalValidationRequired": true,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 611,
        "outputTokens": 183,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "AWAITING_VALIDATION",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": null,
          "maxIterations": 10,
          "name": "Lucas",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Technical Writer",
          "status": "INITIAL",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "interpolatedTaskDescription": null,
      "isDeliverable": true,
      "outputSchema": null,
      "result": null,
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "TODO",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": null,
          "maxIterations": 10,
          "name": "Mia",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Validator",
          "status": "INITIAL",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "interpolatedTaskDescription": null,
      "isDeliverable": false,
      "outputSchema": null,
      "result": null,
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "TODO",
      "store": [Function],
      "title": "",
    },
  ],
  "teamWorkflowStatus": "BLOCKED",
  "workflowContext": "",
  "workflowLogs": [
    {
      "agent": null,
      "logDescription": "Workflow initiated for team *Product Specs Team*.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "inputs": null,
        "message": "Workflow has been initialized with input settings.",
        "startTime": "[REDACTED]",
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Analyze the founder's... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Emma - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Emma starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Emma, please complete the following task: Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.. 
        Your expected output should be: "A functional outline of the Founder Idea". 
        ",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Emma finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools."
}",
          "llmUsageStats": {
            "inputTokens": 611,
            "outputTokens": 183,
          },
          "parsedLLMOutput": {
            "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Emma got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Emma - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Emma - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task awaiting validation: Analyze the founder's.... Awaiting validation.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "AWAITING_VALIDATION",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "logDescription": "Workflow blocked: Task awaiting validation",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "error": "Task awaiting validation",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 183,
          "parsingErrors": 0,
        },
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": true,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "The referral program for the SAAS platform should include the following core functionalities: 1. Referral Tracking: Implement a system to generate unique referral links for users. 2. User Dashboard: Create a dashboard where users can track their referrals, referrals' actions, and their own rewards. 3. Incentives Structure: Define and configure different rewards for both referrer and referee (e.g., discounts, credits, or free months). 4. Notification System: Build a notification system that alerts users when their referrals sign up or make qualifying actions. 5. Analytics and Reporting: Integrate analytics tools to provide insights on referral performance and user engagement. 6. User Registration: Ensure seamless integration of referral codes during the sign-up process. 7. Admin Management: Develop an admin portal to manage the referral program, including settings, user moderation, and reporting tools.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "AWAITING_VALIDATION",
        "store": [Function],
        "title": "",
      },
      "timestamp": "[REDACTED]",
      "workflowStatus": "BLOCKED",
    },
  ],
  "workflowResult": null,
}
`;

exports[`Product Spec Team Workflows Using OpenAI Agents completes the entire workflow successfully 1`] = `
{
  "agents": [
    {
      "agentInstance": {
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
  ],
  "inputs": {
    "founderIdea": "I want to add a Referral program to our SAAS platform.",
  },
  "logLevel": "error",
  "name": "Product Specs Team",
  "tasks": [
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A functional outline of the Founder Idea",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 611,
        "outputTokens": 339,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Lucas",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Technical Writer",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "isDeliverable": true,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 897,
        "outputTokens": 931,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Mia",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Validator",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
      "externalValidationRequired": false,
      "feedbackHistory": [],
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 1755,
        "outputTokens": 931,
        "parsingErrors": 0,
      },
      "outputSchema": null,
      "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
  ],
  "teamWorkflowStatus": "FINISHED",
  "workflowContext": "",
  "workflowLogs": [
    {
      "agent": null,
      "logDescription": "Workflow initiated for team *Product Specs Team*.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "inputs": null,
        "message": "Workflow has been initialized with input settings.",
        "startTime": "[REDACTED]",
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Emma",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Analyze the founder's... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Emma - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Emma starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Emma, please complete the following task: Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.. 
        Your expected output should be: "A functional outline of the Founder Idea". 
        ",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Emma finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": {
        "coreFunctionalities": [
            {
                "functionality": "User Registration and Referral Link Generation",
                "description": "Allow users to generate unique referral links upon registration or through their account settings."
            },
            {
                "functionality": "Referral Tracking",
                "description": "Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."
            },
            {
                "functionality": "Incentive Management",
                "description": "Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."
            },
            {
                "functionality": "Dashboard for Users",
                "description": "Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."
            },
            {
                "functionality": "Communication and Notification System",
                "description": "Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."
            },
            {
                "functionality": "Admin Dashboard",
                "description": "Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."
            },
            {
                "functionality": "Terms and Conditions",
                "description": "Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."
            }
        ],
        "objectives": [
            "Increase user acquisition through referrals.",
            "Enhance user engagement by providing a rewarding experience.",
            "Gather data on referral performance to optimize marketing strategies."
        ]
    }
}",
          "llmUsageStats": {
            "inputTokens": 611,
            "outputTokens": 339,
          },
          "parsedLLMOutput": {
            "finalAnswer": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Emma got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Emma - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Emma - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Emma",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Analyze the founder's....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0002,
          "totalCost": 0.0003,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 611,
          "outputTokens": 339,
          "parsingErrors": 0,
        },
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

Your role is: Requirements Analyst.
Your background is: Business Analysis.
Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Emma",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "{"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Lucas",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Technical Writer",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Lucas",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Create detailed technical... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Lucas - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Lucas starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Lucas, please complete the following task: Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.. 
        Your expected output should be: "A detailed technical specifications document. Must be in Markdown format.". 
        Incorporate the following findings and insights from previous tasks: "Task: Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.
Result: {"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}
"",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Lucas finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
    "finalAnswer": "# Technical Specifications Document\\n\\n## Introduction\\nThis document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.\\n\\n## User Stories\\n1. **User Registration and Referral Link Generation**  \\n   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.\\n\\n2. **Referral Tracking**  \\n   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.\\n\\n3. **Incentive Management**  \\n   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.\\n\\n4. **Dashboard for Users**  \\n   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.\\n\\n5. **Communication and Notification System**  \\n   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.\\n\\n6. **Admin Dashboard**  \\n   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.\\n\\n7. **Terms and Conditions**  \\n   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.\\n\\n## System Requirements\\n### Functional Requirements\\n- **User Registration and Referral Link Generation**  \\n  - Users must be able to register and receive a unique referral link automatically.\\n- **Referral Tracking**  \\n  - The system must log all referral link clicks and successful sign-ups.\\n- **Incentive Management**  \\n  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).\\n- **Dashboard for Users**  \\n  - A user dashboard must be created showing referral statistics and rewards.\\n- **Communication and Notification System**  \\n  - Automated email and in-app notifications should be configured to inform users about their referrals.\\n- **Admin Dashboard**  \\n  - Admins should have access to generate reports on referral program performance.\\n- **Terms and Conditions**  \\n  - A dedicated page should be created to detail the terms of service regarding the referral program.\\n\\n### Non-Functional Requirements\\n- **Performance**  \\n  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.\\n- **Scalability**  \\n  - The architecture must allow for easy integration of new features as needed.\\n- **Security**  \\n  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.\\n- **Usability**  \\n  - The user interface should be intuitive and accessible to enhance user adoption.\\n\\n## Acceptance Criteria\\n1. **User Registration and Referral Link Generation**  \\n   - [ ] Users can generate and share their referral links successfully.\\n2. **Referral Tracking**  \\n   - [ ] The system accurately records referral link clicks and sign-ups.\\n3. **Incentive Management**  \\n   - [ ] Admin can create, update, and delete incentives without errors.\\n4. **Dashboard for Users**  \\n   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.\\n5. **Communication and Notification System**  \\n   - [ ] Users receive timely notifications regarding their referral activities.\\n6. **Admin Dashboard**  \\n   - [ ] Admins can view comprehensive reports on the referral program's performance.\\n7. **Terms and Conditions**  \\n   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.\\n\\n## Objectives\\n- Increase user acquisition through referrals.\\n- Enhance user engagement by providing a rewarding experience.\\n- Gather data on referral performance to optimize marketing strategies.\\n\\n---  \\nThis document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively."
}",
          "llmUsageStats": {
            "inputTokens": 897,
            "outputTokens": 931,
          },
          "parsedLLMOutput": {
            "finalAnswer": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Lucas got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Lucas - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Lucas - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Lucas",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Create detailed technical....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0006,
          "totalCost": 0.0007,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 897,
          "outputTokens": 931,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

Your role is: Technical Writer.
Your background is: Technical Writing.
Your main goal is: Convert functional outlines into detailed technical specifications.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Lucas",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "forceFinalAnswer": true,
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "interactionsHistory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
          "maxIterations": 10,
          "name": "Mia",
          "promptTemplates": {
            "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
            "INITIAL_MESSAGE": [Function],
            "INVALID_JSON_FEEDBACK": [Function],
            "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
            "OBSERVATION_FEEDBACK": [Function],
            "SELF_QUESTION_FEEDBACK": [Function],
            "SYSTEM_MESSAGE": [Function],
            "THOUGHT_FEEDBACK": [Function],
            "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
            "TOOL_ERROR_FEEDBACK": [Function],
            "TOOL_NOT_EXIST_FEEDBACK": [Function],
            "TOOL_RESULT_FEEDBACK": [Function],
            "WEIRD_OUTPUT_FEEDBACK": [Function],
            "WORK_ON_FEEDBACK_FEEDBACK": [Function],
          },
          "role": "Validator",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Mia",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Review the technical... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Mia - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Mia starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "messages": [
          {
            "content": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "type": "SystemMessage",
          },
          {
            "content": "Hi Mia, please complete the following task: Review the technical specifications to ensure they match the founder's vision and that are technically feasible.. 
        Your expected output should be: "A validated technical specifications document ready for development. Must be in Markdown format.". 
        Incorporate the following findings and insights from previous tasks: "Task: Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.
Result: {"coreFunctionalities":[{"functionality":"User Registration and Referral Link Generation","description":"Allow users to generate unique referral links upon registration or through their account settings."},{"functionality":"Referral Tracking","description":"Implement a system to track referrals made by users, including clicks and successful sign-ups through referral links."},{"functionality":"Incentive Management","description":"Define and manage incentives for both referrers and referees, such as discounts, credits, or other rewards."},{"functionality":"Dashboard for Users","description":"Create a dashboard where users can view their referral statistics, including total referrals, rewards earned, and referral link performance."},{"functionality":"Communication and Notification System","description":"Automate communication to inform users about their referral success, rewards received, and program updates via email or in-app notifications."},{"functionality":"Admin Dashboard","description":"Develop an admin interface to monitor the referral program's performance, manage users and incentives, and generate reports."},{"functionality":"Terms and Conditions","description":"Provide clear guidelines and rules for the referral program to ensure users understand the terms of participation."}],"objectives":["Increase user acquisition through referrals.","Enhance user engagement by providing a rewarding experience.","Gather data on referral performance to optimize marketing strategies."]}

Task: Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.
Result: # Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.
"",
            "type": "HumanMessage",
          },
        ],
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Mia finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "llmOutput": "{
   "finalAnswer": "# Technical Specifications Document\\n\\n## Introduction\\nThis document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.\\n\\n## User Stories\\n1. **User Registration and Referral Link Generation**  \\n   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.\\n\\n2. **Referral Tracking**  \\n   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.\\n\\n3. **Incentive Management**  \\n   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.\\n\\n4. **Dashboard for Users**  \\n   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.\\n\\n5. **Communication and Notification System**  \\n   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.\\n\\n6. **Admin Dashboard**  \\n   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.\\n\\n7. **Terms and Conditions**  \\n   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.\\n\\n## System Requirements\\n### Functional Requirements\\n- **User Registration and Referral Link Generation**  \\n  - Users must be able to register and receive a unique referral link automatically.\\n- **Referral Tracking**  \\n  - The system must log all referral link clicks and successful sign-ups.\\n- **Incentive Management**  \\n  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).\\n- **Dashboard for Users**  \\n  - A user dashboard must be created showing referral statistics and rewards.\\n- **Communication and Notification System**  \\n  - Automated email and in-app notifications should be configured to inform users about their referrals.\\n- **Admin Dashboard**  \\n  - Admins should have access to generate reports on referral program performance.\\n- **Terms and Conditions**  \\n  - A dedicated page should be created to detail the terms of service regarding the referral program.\\n\\n### Non-Functional Requirements\\n- **Performance**  \\n  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.\\n- **Scalability**  \\n  - The architecture must allow for easy integration of new features as needed.\\n- **Security**  \\n  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.\\n- **Usability**  \\n  - The user interface should be intuitive and accessible to enhance user adoption.\\n\\n## Acceptance Criteria\\n1. **User Registration and Referral Link Generation**  \\n   - [ ] Users can generate and share their referral links successfully.\\n2. **Referral Tracking**  \\n   - [ ] The system accurately records referral link clicks and sign-ups.\\n3. **Incentive Management**  \\n   - [ ] Admin can create, update, and delete incentives without errors.\\n4. **Dashboard for Users**  \\n   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.\\n5. **Communication and Notification System**  \\n   - [ ] Users receive timely notifications regarding their referral activities.\\n6. **Admin Dashboard**  \\n   - [ ] Admins can view comprehensive reports on the referral program's performance.\\n7. **Terms and Conditions**  \\n   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.\\n\\n## Objectives\\n- Increase user acquisition through referrals.\\n- Enhance user engagement by providing a rewarding experience.\\n- Gather data on referral performance to optimize marketing strategies.\\n\\n---  \\nThis document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively."
}",
          "llmUsageStats": {
            "inputTokens": 1755,
            "outputTokens": 931,
          },
          "parsedLLMOutput": {
            "finalAnswer": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
          },
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Mia got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "output": {
          "finalAnswer": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        },
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Mia - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Mia - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "forceFinalAnswer": true,
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "interactionsHistory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
        "maxIterations": 10,
        "name": "Mia",
        "promptTemplates": {
          "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
          "INITIAL_MESSAGE": [Function],
          "INVALID_JSON_FEEDBACK": [Function],
          "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
          "OBSERVATION_FEEDBACK": [Function],
          "SELF_QUESTION_FEEDBACK": [Function],
          "SYSTEM_MESSAGE": [Function],
          "THOUGHT_FEEDBACK": [Function],
          "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
          "TOOL_ERROR_FEEDBACK": [Function],
          "TOOL_NOT_EXIST_FEEDBACK": [Function],
          "TOOL_RESULT_FEEDBACK": [Function],
          "WEIRD_OUTPUT_FEEDBACK": [Function],
          "WORK_ON_FEEDBACK_FEEDBACK": [Function],
        },
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Review the technical....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0003,
          "costOutputTokens": 0.0006,
          "totalCost": 0.0008,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 1755,
          "outputTokens": 931,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "forceFinalAnswer": true,
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "interactionsHistory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

Your role is: Validator.
Your background is: Quality Assurance.
Your main goal is: Ensure the specifications are accurate and complete.
You are working as part of a team.

For your work you will have available:

- Access to a defined set of tools. 
- Findings and insights from previous tasks. You must use this information to complete your current task.
- Must follow a specific format for your output.

## Tools available for your use: 

No tools available. You must reply using your internal knowledge.

**Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

## Format of your output

You will return just one of the following:

- Thought + (Action or Self Question)
OR
- Observation
OR
- Final Answer

Below is the explanation of each one:

### Thought + (Action or Self Question)

{
   "thought": "your thoughts about what to do next" // it could be an action or ask yourself a follow up question
   "action":  "you decide what action to take based on your previous thought", // the action could be a self follow up question or decide to use a tool from the available tools to use,
   "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using \\" to wrap keys and values. Remember to use the Tool Schema.
}

Examples: 

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "tavily_search_results_json",
   "actionInput": {"query":"Copa America 2024 winner"}
}

other

{
   "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
   "action": "self_question",
   "actionInput": {"query":"Copa America 2024 winner"}
}

### Observation

{
   "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
    "isFinalAnswerReady": false // If you have the final answer or not
}

### Final Answer

IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

{
    "finalAnswer": "The final answer to the Task."
}

**IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
",
            "maxIterations": 10,
            "name": "Mia",
            "promptTemplates": {
              "FORCE_FINAL_ANSWER_FEEDBACK": [Function],
              "INITIAL_MESSAGE": [Function],
              "INVALID_JSON_FEEDBACK": [Function],
              "INVALID_OUTPUT_SCHEMA_FEEDBACK": [Function],
              "OBSERVATION_FEEDBACK": [Function],
              "SELF_QUESTION_FEEDBACK": [Function],
              "SYSTEM_MESSAGE": [Function],
              "THOUGHT_FEEDBACK": [Function],
              "THOUGHT_WITH_SELF_QUESTION_FEEDBACK": [Function],
              "TOOL_ERROR_FEEDBACK": [Function],
              "TOOL_NOT_EXIST_FEEDBACK": [Function],
              "TOOL_RESULT_FEEDBACK": [Function],
              "WEIRD_OUTPUT_FEEDBACK": [Function],
              "WORK_ON_FEEDBACK_FEEDBACK": [Function],
            },
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "externalValidationRequired": false,
        "feedbackHistory": [],
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "outputSchema": null,
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": null,
      "logDescription": "Workflow finished with result: # Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0005,
          "costOutputTokens": 0.0013,
          "totalCost": 0.0018,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "feedback": {},
        "iterationCount": 3,
        "llmUsageStats": {
          "callsCount": 3,
          "callsErrorCount": 0,
          "inputTokens": 3263,
          "outputTokens": 2201,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "FINISHED",
    },
  ],
  "workflowResult": "# Technical Specifications Document

## Introduction
This document outlines the detailed technical specifications for the implementation of the referral program based on the founder's idea. The aim is to create a user-friendly referral system that increases user acquisition and engagement.

## User Stories
1. **User Registration and Referral Link Generation**  
   As a user, I want to generate a unique referral link during registration or from my account settings so that I can share it with others to earn rewards.

2. **Referral Tracking**  
   As a user, I want to track the clicks and successful sign-ups through my referral links so that I can monitor my performance.

3. **Incentive Management**  
   As an admin, I want to define and manage different incentives for referrers and referees, so that I can motivate users to participate in the referral program.

4. **Dashboard for Users**  
   As a user, I want to view my referral statistics, rewards earned, and referral link performance on a dashboard, so that I can keep track of my progress.

5. **Communication and Notification System**  
   As a user, I want to receive notifications about my referral success and rewards so that I can stay informed.

6. **Admin Dashboard**  
   As an admin, I want an interface to monitor the referral program's performance and manage users, so that I can optimize the program based on real data.

7. **Terms and Conditions**  
   As a user, I want to read the clear guidelines and rules of the referral program, so that I understand how to participate correctly.

## System Requirements
### Functional Requirements
- **User Registration and Referral Link Generation**  
  - Users must be able to register and receive a unique referral link automatically.
- **Referral Tracking**  
  - The system must log all referral link clicks and successful sign-ups.
- **Incentive Management**  
  - Admin panel must support adding, updating, and deleting incentive options (e.g., discounts, credits).
- **Dashboard for Users**  
  - A user dashboard must be created showing referral statistics and rewards.
- **Communication and Notification System**  
  - Automated email and in-app notifications should be configured to inform users about their referrals.
- **Admin Dashboard**  
  - Admins should have access to generate reports on referral program performance.
- **Terms and Conditions**  
  - A dedicated page should be created to detail the terms of service regarding the referral program.

### Non-Functional Requirements
- **Performance**  
  - The system must handle up to 10,000 concurrent users with a response time of less than 2 seconds.
- **Scalability**  
  - The architecture must allow for easy integration of new features as needed.
- **Security**  
  - User data must be encrypted in transit and at rest. Proper authentication must be enforced for the admin dashboard.
- **Usability**  
  - The user interface should be intuitive and accessible to enhance user adoption.

## Acceptance Criteria
1. **User Registration and Referral Link Generation**  
   - [ ] Users can generate and share their referral links successfully.
2. **Referral Tracking**  
   - [ ] The system accurately records referral link clicks and sign-ups.
3. **Incentive Management**  
   - [ ] Admin can create, update, and delete incentives without errors.
4. **Dashboard for Users**  
   - [ ] Users can see accurate statistics on their dashboard reflecting their referral activities.
5. **Communication and Notification System**  
   - [ ] Users receive timely notifications regarding their referral activities.
6. **Admin Dashboard**  
   - [ ] Admins can view comprehensive reports on the referral program's performance.
7. **Terms and Conditions**  
   - [ ] Users can easily access and comprehend the terms and conditions of the referral program.

## Objectives
- Increase user acquisition through referrals.
- Enhance user engagement by providing a rewarding experience.
- Gather data on referral performance to optimize marketing strategies.

---  
This document serves as a comprehensive guide for the development team to implement the mentioned functionalities effectively.",
}
`;
